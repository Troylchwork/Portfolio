{"version":3,"file":"static/js/826.dac9d298.chunk.js","mappings":"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","sources":["pages/Contact/styles.js","components/AlertDialog/styles.js","components/AlertDialog/index.js","hooks/useSubmit.js","pages/Contact/index.js"],"sourcesContent":["import { styled, TextField, Stack, FormControl } from \"@mui/material\";\n\nexport const Background = styled(Stack)(({ theme }) => ({\n    background: theme.beige,\n    minHeight: \"1280px\",\n}));\n\nexport const ForomContainer = styled(Stack)({\n    gap: \"20px\",\n    margin: \"0 20%\",\n    alignItems: \"center\",\n});\n\nexport const Control = styled(FormControl)({\n    margin: \"20px\",\n});\n\nexport const Header = styled(\"div\")({\n    margin: \"5%\",\n    fontSize: \"48px\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    position: \"relative\",\n});\n\nexport const Label = styled(\"label\")({\n    fontSize: \"20px\",\n    fontWeight: \"bold\",\n});\n\nexport const Input = styled(\"input\")({\n    width: \"100%\",\n    padding: \"8px\",\n    margin: \"10px 0\",\n});\n\nexport const Textarea = styled(\"textarea\")({\n    width: \"100%\",\n    padding: \"8px\",\n    margin: \"10px 0\",\n});\n","import { styled, DialogContentText } from \"@mui/material\";\n\nexport const AlertContentText = styled(DialogContentText)({\n    whiteSpace: \"break-spaces\",\n    textAlign:'center'\n});\n","import {\n    Dialog,\n    DialogTitle,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    Button,\n} from \"@mui/material\";\nimport { useAlertContext } from \"../../context/alertContext\";\nimport { AlertContentText } from \"./styles\";\nexport default function AlertDialog() {\n    const { isOpen, name, email, subject, message, onClose } =\n        useAlertContext();\n    return (\n        <Dialog open={isOpen} onClose={onClose}>\n            <DialogTitle>{\"Padding Update\"}</DialogTitle>\n            <DialogContent>\n                <AlertContentText>\n                    Sorry {name}, this function just for demo now.\n                    <br />\n                    Here is the info you send\n                    <br />\n                    <strong>Email:</strong>{email}\n                    <br />\n                    <strong>{subject}</strong>\n                    <br />\n                    {message}\n                </AlertContentText>\n            </DialogContent>\n            <DialogActions sx={{ justifyContent: \"center\" }}>\n                <Button onClick={onClose}>Close</Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import { useState } from \"react\";\n\nconst wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst useSubmit = () => {\n    const [isLoading, setLoading] = useState(false);\n    const [response, setResponse] = useState(null);\n\n    const submit = async (url, data) => {\n        setLoading(true);\n        try {\n            await wait(1000);\n            setResponse({\n                name: data.name,\n                email: data.email,\n                subject: data.subject,\n                message: data.message,\n            });\n        } catch (error) {\n            console.log(error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return { isLoading, response, submit };\n};\n\nexport default useSubmit;\n","import { useEffect } from \"react\";\nimport {\n    Stack,\n    Button,\n    InputLabel,\n    Input,\n    OutlinedInput,\n    FormHelperText,\n    CircularProgress,\n} from \"@mui/material\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { ForomContainer, Header, Background, Control } from \"./styles\";\nimport { useAlertContext } from \"../../context/alertContext\";\nimport AlertDialog from \"../../components/AlertDialog\";\nimport useSubmit from \"../../hooks/useSubmit\";\n\nexport default function Contact() {\n    const { onOpen } = useAlertContext();\n    const { isLoading, response, submit } = useSubmit();\n\n    const formik = useFormik({\n        initialValues: {\n            name: \"\",\n            email: \"\",\n            subject: \"\",\n            message: \"\",\n        },\n        validationSchema: Yup.object({\n            name: Yup.string().required(\"Name is required\"),\n            email: Yup.string()\n                .email(\"Invalid email\")\n                .required(\"Eamil is required\"),\n            subject: Yup.string().required(\"Subject is required\"),\n            message: Yup.string().min(5).required(\"Message is equired\"),\n        }),\n        onSubmit: (values) => {\n            submit(\"\", values);\n        },\n    });\n\n    useEffect(() => {\n        if (response) {\n            onOpen(\n                response.name,\n                response.email,\n                response.subject,\n                response.message\n            );\n        }\n        formik.resetForm();\n    }, [response]);\n\n    return (\n        <Background>\n            <Header>Let's talk</Header>\n            <ForomContainer>\n                <form\n                    onSubmit={formik.handleSubmit}\n                    style={{\n                        display: \"grid\",\n                        width: \"600px\",\n                        height: \"800px\",\n                        background: \"white\",\n                        padding: \"60px\",\n                    }}\n                >\n                    <Control\n                        variant=\"standard\"\n                        error={formik.errors.name && formik.touched.name}\n                    >\n                        <InputLabel htmlFor=\"name\">Name</InputLabel>\n                        <Input id=\"name\" {...formik.getFieldProps(\"name\")} />\n                        {formik.touched.name && formik.errors.name ? (\n                            <FormHelperText>\n                                {formik.errors.name}\n                            </FormHelperText>\n                        ) : null}\n                    </Control>\n                    <Control\n                        variant=\"standard\"\n                        error={formik.errors.email && formik.touched.email}\n                    >\n                        <InputLabel htmlFor=\"email\">Email</InputLabel>\n                        <Input id=\"email\" {...formik.getFieldProps(\"email\")} />\n                        {formik.touched.email && formik.errors.email ? (\n                            <FormHelperText>\n                                {formik.errors.email}\n                            </FormHelperText>\n                        ) : null}\n                    </Control>\n                    <Control\n                        variant=\"standard\"\n                        error={formik.errors.subject && formik.touched.subject}\n                    >\n                        <InputLabel htmlFor=\"subject\">Subject</InputLabel>\n                        <Input\n                            id=\"subject\"\n                            {...formik.getFieldProps(\"subject\")}\n                        />\n                        {formik.touched.subject && formik.errors.subject ? (\n                            <FormHelperText>\n                                {formik.errors.subject}\n                            </FormHelperText>\n                        ) : null}\n                    </Control>\n                    <Control\n                        variant=\"outlined\"\n                        error={formik.errors.message && formik.touched.message}\n                    >\n                        <InputLabel htmlFor=\"message\">Message</InputLabel>\n                        <OutlinedInput\n                            multiline\n                            rows={4}\n                            id=\"message\"\n                            label=\"Message\"\n                            {...formik.getFieldProps(\"message\")}\n                        />\n                        {formik.touched.message && formik.errors.message ? (\n                            <FormHelperText>\n                                {formik.errors.message}\n                            </FormHelperText>\n                        ) : null}\n                    </Control>\n\n                    <Stack\n                        sx={{\n                            justifyContent: \"center\",\n                            alignItems: \"center\",\n                            gap: \"10px\",\n                        }}\n                    >\n                        <div>*Fake Sumbit</div>\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            sx={{ height: \"60px\", width: \"400px\" }}\n                            disabled={isLoading}\n                            startIcon={\n                                isLoading ? (\n                                    <CircularProgress size={24} />\n                                ) : null\n                            }\n                        >\n                            {isLoading ? \"\" : \"Submit\"}\n                        </Button>\n                    </Stack>\n                </form>\n            </ForomContainer>\n            <AlertDialog />\n        </Background>\n    );\n}\n"],"names":["Background","styled","Stack","_ref","theme","background","beige","minHeight","ForomContainer","gap","margin","alignItems","Control","FormControl","Header","fontSize","fontWeight","textAlign","position","width","padding","AlertContentText","DialogContentText","whiteSpace","AlertDialog","isOpen","name","email","subject","message","onClose","useAlertContext","_jsxs","Dialog","open","children","_jsx","DialogTitle","DialogContent","DialogActions","sx","justifyContent","Button","onClick","useSubmit","isLoading","setLoading","useState","response","setResponse","submit","async","url","data","ms","Promise","resolve","setTimeout","error","console","log","Contact","onOpen","formik","useFormik","initialValues","validationSchema","Yup","required","min","onSubmit","values","useEffect","resetForm","handleSubmit","style","display","height","variant","errors","touched","InputLabel","htmlFor","Input","id","getFieldProps","FormHelperText","OutlinedInput","multiline","rows","label","type","disabled","startIcon","CircularProgress","size"],"sourceRoot":""}